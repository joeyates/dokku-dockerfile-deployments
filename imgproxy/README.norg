- Code: https://github.com/imgproxy/imgproxy
- Container: docker.io/darthsim/imgproxy:latest

* Set Up Dokku

  - Set up a DNS entry for the app
  - Create and edit .envrc.private, based on .envrc

  @code sh
  dokku apps:create "$DOKKU_APP"
  dokku domains:set "$DOKKU_APP" $APP_DOMAIN

  # Configure certificate
  dokku letsencrypt:set $DOKKU_APP email $DOMAIN_EMAIL
  # To avoid getting rate limited, use staging first
  dokku letsencrypt:set $DOKKU_APP server staging
  dokku letsencrypt:enable $DOKKU_APP
  # Switch to production
  dokku letsencrypt:set $DOKKU_APP server
  dokku letsencrypt:enable $DOKKU_APP

  dokku ports:set $DOKKU_APP https:443:8080

  dokku config:set --no-restart $DOKKU_APP \
    IMGPROXY_PATH_PREFIX=$DOKKU_IMGPROXY_PATH_PREFIX \
    IMGPROXY_LOCAL_FILESYSTEM_ROOT=$DOKKU_IMGPROXY_LOCAL_FILESYSTEM_ROOT

  dokku storage:mount $DOKKU_APP "$REMOTE_HOST_FILESYSTEM_ROOT:$DOKKU_IMGPROXY_LOCAL_FILESYSTEM_ROOT"
  dokku git:from-image $DOKKU_APP $CONTAINER
  @end

* Serving From The Local File System

  - set `IMGPROXY_LOCAL_FILESYSTEM_ROOT` to the path where the images are stored
  - add `/insecure/` to the URL to disable the signature check
  - add `/plain/` to the URL to disable the format check
  - add `/local:///` to the URL to specify the source
  - URL encode the path to the image

* Signed URLs

  - set `IMGPROXY_KEY` and `IMGPROXY_SALT` to enable signed URLs

* Run Locally

  @code sh
  podman pull docker.io/darthsim/imgproxy:latest
  podman run --env IMGPROXY_LOCAL_FILESYSTEM_ROOT=/CONTAINER/PATH --volume /HOST/PATH:/CONTAINER/PATH --publish 8080:8080 -it darthsim/imgproxy:latest
  @end

  @code sh
  curl -O 'http://localhost:8080/insecure/plain/local:///SOME%20IMAGE.jpg'
  @end

* Other Configuration

  `IMGPROXY_PATH_PREFIX` - insert a prefix before the path
